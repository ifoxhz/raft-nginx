events {
    worker_connections 1024;
}
http {
    # 加载 Lua 库
    lua_package_path "/path/to/lua/scripts/?.lua;;";
    
    # 创建一个共享字典用于缓存状态信息
    lua_shared_dict status_cache 10m;

    server {
        listen 80;

        location / {
            access_by_lua_block {
                -- 获取共享字典实例
                local cache = ngx.shared.status_cache
                
                -- 尝试从缓存中获取状态信息
                local cached_role = cache:get("role")
                
                if cached_role then
                    -- 如果有缓存且未过期，直接使用缓存中的状态
                    if cached_role == "Leader" then
                        return
                    elseif cached_role == "Follower" and ngx.req.get_method() == "GET" then
                        return
                    else
                        ngx.log(ngx.ERR, "non-leader not support POST")
                        ngx.exit(403)
                    end
                end

                -- 缓存不存在或已过期，重新查询微服务
                 local file_path = "/dev/shm/raftstate"
                -- 读取文件
                local file, err = io.open(file_path, "r")
                if not file then
                    ngx.log(ngx.ERR, "Failed to open file: ", err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
                local content = file:read("*all")
                file:close()
                
                -- 解析 JSON
                local cjson = require "cjson"
                local ok, raft_state = pcall(cjson.decode, content)
                if not ok then
                    ngx.log(ngx.ERR, "JSON decode error: ", raft_state)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
                ngx.log(ngx.INFO, "JSON decode value: ", cjson.encode(raft_state))

                if raft_state.State == "Leader" or raft_state.State == "Follower" then
                    -- 更新缓存，设置过期时间为10秒
                    cache:set("role", raft_state.state, 10)
                    
                    if raft_state.State == "Leader" then
                        return 
                    elseif raft_state.State == "Follower" and ngx.req.get_method() == "GET" then
                        return
                    else
                        ngx.exit(403)
                    end
                else
                    ngx.log(ngx.ERR, "Invalid role response: ", raft_state.State)
                    ngx.exit(507)
                end
            }
            
            proxy_pass http://localhost:10085;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
